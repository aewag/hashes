name: sha2

on:
  pull_request:
    paths:
      - ".github/workflows/sha2.yml"
      - "sha2/**"
      - "Cargo.*"
  push:
    branches: master

defaults:
  run:
    working-directory: sha2

env:
  MSRV: 1.41.0
  RUSTFLAGS: "-Dwarnings"
  CARGO_INCREMENTAL: 0

jobs:
  set-msrv:
    runs-on: ubuntu-latest
    outputs:
      msrv: ${{ steps.msrv.outputs.msrv }}
      os: ${{ steps.os.outputs.os }}
    steps:
      - uses: actions/checkout@v2
      - id: msrv
        run: echo "::set-output name=msrv::$(echo $MSRV)"
      - id: os
        run: echo "::set-output name=os::$(echo no_std)"

  set-matrix:
    needs: set-msrv
    runs-on: ubuntu-latest
    outputs:
      build: ${{ steps.set-build-matrix.outputs.matrix }}
      test: ${{ steps.set-test-matrix.outputs.matrix }}
      cross: ${{ steps.set-cross-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - id: set-build-matrix
        run: echo "::set-output name=matrix::{'include':[
                {
                    'target':'thumbv7em-none-eabi',
                    'rust':'${{needs.set-msrv.outputs.msrv}}',
                },
                {
                    'target':'thumbv7em-none-eabi',
                    'rust':'stable',
                },
                {
                    'target':'wasm32-unknown-unknown',
                    'rust':'${{needs.set-msrv.outputs.msrv}}',
                },
                {
                    'target':'wasm32-unknown-unknown',
                    'rust':'stable',
                },
            ]}"
      - id: set-test-matrix
        run: echo "::set-output name=matrix::{'include':[
                {
                    'os':'ubuntu-latest',
                    'target':'i686-unknown-linux-gnu',
                    'rust':'${{needs.set-msrv.outputs.msrv}}',
                    'deps':'sudo apt update && sudo apt install gcc-multilib',
                },
                {
                    'os':'ubuntu-latest',
                    'target':'i686-unknown-linux-gnu',
                    'rust':'stable',
                    'deps':'sudo apt update && sudo apt install gcc-multilib',
                },
                {
                    'os':'ubuntu-latest',
                    'target':'x86_64-unknown-linux-gnu',
                    'rust':'${{needs.set-msrv.outputs.msrv}}',
                },
                {
                    'os':'ubuntu-latest',
                    'target':'x86_64-unknown-linux-gnu',
                    'rust':'stable',
                },
                {
                    'os':'macos-latest',
                    'target':'x86_64-apple-darwin',
                    'rust':'${{needs.set-msrv.outputs.msrv}}',
                },
                {
                    'os':'macos-latest',
                    'target':'x86_64-apple-darwin',
                    'rust':'stable',
                },
                {
                    'os':'windows-latest',
                    'target':'x86_64-pc-windows-gnu',
                    'rust':'stable',
                },
            ]}"
            # TODO(tarcieri): try re-enabling this when we bump MSRV
            #    {
            #        'os':'windows-latest',
            #        'target':'x86_64-pc-windows-gnu',
            #        'rust':'${{needs.set-msrv.outputs.msrv}}',
            #    },
      - id: set-cross-matrix
        run: echo "::set-output name=matrix::{'include':[
                {
                    'target':'aarch64-unknown-linux-gnu',
                    'rust':'${{needs.set-msrv.outputs.msrv}}',
                    'features':'default',
                },
                {
                    'target':'aarch64-unknown-linux-gnu',
                    'rust':'stable',
                    'features':'default',
                },
                {
                    'target':'aarch64-unknown-linux-gnu',
                    'rust':'stable',
                    'features':'asm',
                },
                {
                    'target':'mips-unknown-linux-gnu',
                    'rust':'${{needs.set-msrv.outputs.msrv}}',
                    'features':'default',
                },
                {
                    'target':'mips-unknown-linux-gnu',
                    'rust':'stable',
                    'features':'default',
                },
            ]}"

  # Builds for no_std platforms
  build:
    needs: set-matrix
    # if: needs.set-msrv.outputs.os != 'no_std'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJSON(needs.set-matrix.outputs.build)}}
    steps:
      - uses: actions/checkout@v2
      - run: echo ${{ needs.set-msrv.outputs.os }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true
      - run: cargo build --no-default-features --target ${{ matrix.target }}

  # Specific OS tests
  test:
    needs: set-matrix
    # TODO
    # Local reference to reusable workflow is not working, see:
    # https://github.community/t/ref-head-in-reusable-workflows/203690/63
    uses: aewag/hashes/.github/workflows/test.yml@try-ci-common
    with:
        package: ${{ github.workflow }}
        matrix: ${{ needs.set-matrix.outputs.test }}

  # Cross-compiled tests
  cross:
    needs: set-matrix
    # TODO
    # Local reference to reusable workflow is not working, see:
    # https://github.community/t/ref-head-in-reusable-workflows/203690/63
    uses: aewag/hashes/.github/workflows/cross.yml@try-ci-common
    with:
        package: ${{ github.workflow }}
        matrix: ${{ needs.set-matrix.outputs.cross }}
